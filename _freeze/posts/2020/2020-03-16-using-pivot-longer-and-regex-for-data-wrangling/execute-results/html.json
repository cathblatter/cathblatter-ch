{
  "hash": "730f729ab0e39921464506fe6e80625d",
  "result": {
    "markdown": "---\ntitle: Using tidyr::pivot_longer() and regex for data wrangling\nauthor: Cath Blatter\ndate: '2020-03-16'\n---\n\n\n# TL;DR\n\nThis code shows you how you can effectively wrangle your dataframe from wide to \nlong using `tidyr::pivot_longer()` combined with regular expressions for properly \nnaming the variables. \n\n# Your data is... not in the right format!\n\nYou have a wide dataset of patient data, each patient identified through `ID`. \nThey have been hospitalised multiple times, each place of hospitalisation and \noutcome listed in its own variable. Place and Outcome of a hospitalization are \nlinked with the same suffix number, e.g. `_2_2`: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nsuppressPackageStartupMessages(library(tidyverse))\n\n# create sample data\npatient_data <- \ntibble::tribble(~ID, ~Hosp_Place_1, ~Hosp_Outcome_1, ~Hosp_Place_2_2, \n                ~Hosp_Outcome_2_2, ~Hosp_Place_2_3, ~Hosp_Outcome_2_3, \n                1, \"London\", \"Alive\", \"Paris\", \"alive\", \"Rome\", \"dead\",\n                2, \"Paris\", \"alive\", \"Rome\", \"alive\", \"London\", \"alive\",\n                3, \"Berne\", \"dead\", NA_character_, NA_character_, NA_character_, NA_character_) \n\n# look at data\npatient_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 7\n     ID Hosp_Place_1 Hosp_Outcome_1 Hosp_Place_2_2 Hosp_Outcome_2_2\n  <dbl> <chr>        <chr>          <chr>          <chr>           \n1     1 London       Alive          Paris          alive           \n2     2 Paris        alive          Rome           alive           \n3     3 Berne        dead           <NA>           <NA>            \n# … with 2 more variables: Hosp_Place_2_3 <chr>, Hosp_Outcome_2_3 <chr>\n```\n:::\n:::\n\n\nPatient No. 3 died in his first hospitatisation, so the following variables are listed `NA`.  \n\nFor some analysis, this data structure would work ok, but for your specific questions \nyou need to switch the unit of analysis to \"hospitalisation\" instead of \"patient\". \nIn other words, you'd like to switch the data from wide to long. \n\nThanks to the tidyverse's initiative of making clear function names, it might be \nobvious, that `tidyr::pivot_longer()` should do what you want.  \n\n# Familiarize yourself with the function - What to do with tidyr::pivot_longer()?\n\nThe first step is to initially think about, what the outcome should look like and \nwhat input-arguments the function takes, so let's do this: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tidyr::pivot_long() and its arguments\ntidyr::pivot_longer(data, \n                    cols, \n                    names_to = \"name\", \n                    names_prefix = NULL, \n                    names_sep = NULL, \n                    names_pattern = NULL,\n                    names_ptypes = list(),\n                    names_repair = \"check_unique\",\n                    values_to = \"value\",\n                    values_drop_na = FALSE,\n                    values_ptypes = list())\n```\n:::\n\n\nAs you can see, only `data` and `cols` are effectively needed, so let's try that. \nAs I want to exclude the Patient-ID from pivoting, I remove this line from pivoting: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# as with all the tidyverse functions you can easily pipe-in the data as \n# the first argument\n\n# '-ID' means, that all variables are used other than ID\npatient_data %>% \n  pivot_longer(cols = -ID)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 3\n      ID name             value \n   <dbl> <chr>            <chr> \n 1     1 Hosp_Place_1     London\n 2     1 Hosp_Outcome_1   Alive \n 3     1 Hosp_Place_2_2   Paris \n 4     1 Hosp_Outcome_2_2 alive \n 5     1 Hosp_Place_2_3   Rome  \n 6     1 Hosp_Outcome_2_3 dead  \n 7     2 Hosp_Place_1     Paris \n 8     2 Hosp_Outcome_1   alive \n 9     2 Hosp_Place_2_2   Rome  \n10     2 Hosp_Outcome_2_2 alive \n11     2 Hosp_Place_2_3   London\n12     2 Hosp_Outcome_2_3 alive \n13     3 Hosp_Place_1     Berne \n14     3 Hosp_Outcome_1   dead  \n15     3 Hosp_Place_2_2   <NA>  \n16     3 Hosp_Outcome_2_2 <NA>  \n17     3 Hosp_Place_2_3   <NA>  \n18     3 Hosp_Outcome_2_3 <NA>  \n```\n:::\n\n```{.r .cell-code}\n# I could have put the following instead, meaning selecting the variables I want\n# but it was generally shorter to drop just the ID\n# patient_data %>%\n#   pivot_longer(cols = Hosp_Place_1:Hosp_Outcome_2_3)\n```\n:::\n\n\nSomething clearly happened, but `name` and `value` are not exactly what we want here.  \nThe colnames \"name\" and \"value\" are actually coming from the default arguments.  \nWhat is now the next step?  \n\n# Mental image of desired outcome - How should my dataframe look like?\n\nMy desired output is a dataframe with the colum names `ID`, `Hosp_Place` and `Hosp_Outcome`. \nAdditionally, I want a variable - lets call it `hosp_sequence` - that captures the number of \nthe hospitalisation (you remember the suffix of the original variable names).  \n\n`tidyr::pivot_longer()`'s `names_to =`-arguments states in the help-page:  \n*Can be a character vector, creating multiple columns, if names_sep or names_pattern is provided.*    \n\nIf you can detect any patterns in the column names, its possible to use them for the \ncolumn naming.  If we look at Hosp_Place_1 and Hosp_Outcome_1 we can clearly see \na pattern: The information I want as name is `Hosp_Place` and `Hosp_Outcome` and the \nnumber followed should be put in variable called `hosp_sequence`.  \n\nThis translates to something like `(Hosp_Place)_(1)` where the parts in brackets \ncorrespond to the inputs given in `names_to = `. With the `.value`-argument, I \ncan easily take over the string as it is.  \n\nI actually found this very confusing (honestly - still do...) and I had great help for defining the \nregular expression from R4DS^[https://rfordatascience.slack.com/archives/C8K09CDNZ/p1584129595187200 If you are not already on this slack - sign up for it! Its just so great, low key \nhelp and great learning opportunities to just dive through the topics. ].  \n\nFinally, this is the code we need:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this code should do the trick\npatient_data %>% \n  pivot_longer(cols = -ID, \n               names_to = c(\".value\", \"hosp_sequence\"),\n               names_pattern = '(^[A-z]+_[A-z]+)_([0-9].*)')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 4\n     ID hosp_sequence Hosp_Place Hosp_Outcome\n  <dbl> <chr>         <chr>      <chr>       \n1     1 1             London     Alive       \n2     1 2_2           Paris      alive       \n3     1 2_3           Rome       dead        \n4     2 1             Paris      alive       \n5     2 2_2           Rome       alive       \n6     2 2_3           London     alive       \n7     3 1             Berne      dead        \n8     3 2_2           <NA>       <NA>        \n9     3 2_3           <NA>       <NA>        \n```\n:::\n:::\n\n\n\nWait, what is happening with rows 8 and 9? This is my deceased Patient No. 3 an those \nare not hospitalisations anymore - how do I drop those rows? \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# you can either use dplyr::drop_na() or specify the built-in argument to TRUE\npatient_data %>% \n  pivot_longer(cols = -ID, \n               names_to = c(\".value\", \"hosp_sequence\"),\n               names_pattern = '(^[A-z]+_[A-z]+)_([0-9].*)', \n               values_drop_na = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 4\n     ID hosp_sequence Hosp_Place Hosp_Outcome\n  <dbl> <chr>         <chr>      <chr>       \n1     1 1             London     Alive       \n2     1 2_2           Paris      alive       \n3     1 2_3           Rome       dead        \n4     2 1             Paris      alive       \n5     2 2_2           Rome       alive       \n6     2 2_3           London     alive       \n7     3 1             Berne      dead        \n```\n:::\n:::\n\n\n# Comment\n\nI wrote this blogpost after after solving exactly this issue with a real dataset for a colleague.  \nMy work as a research programmer allows me to dive into data wrangling problems on a regular basis. \nAs I learned most of my R skills from other blogposts from the fantastic R community, I \nstarted to write up some of the problems I encountered for others.  I also use my \nprevious blogposts sometimes, when I have to dig up old code... \n\nAny comments from your side? Let me know!\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}